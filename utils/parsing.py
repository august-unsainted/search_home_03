import vk_api
import asyncio
from aiogram.types import InputMediaPhoto
from aiogram import Bot

from utils.logger import logger
from config import VK_LOGIN, VK_PASS, TG_MAIN, TG_TRASH
from utils.ai import send_ai_request
from utils.file_system import get_json, write_info

vk_session = vk_api.VkApi(login=VK_LOGIN, password=VK_PASS)
vk_session.auth(token_only=True)
vk = vk_session.get_api()

SLEEP_TIME = 60


def find_str(text: str, strings: list) -> bool:
    text = text.lower()
    for string in strings:
        if string in text:
            return True
    return False


async def receive_last_posts(last_post: dict, group: str) -> list:
    last_data = get_json()[str(group)]
    logger.info(f'\t\t{str(last_data).ljust(9, " ")} ‚Äî —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞.')
    if last_data != last_post['id']:
        count = last_post['id'] - last_data
    else:
        count = 0

    if count == 0:
        logger.info(f'\t\t–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø—ã.')
        logger.info(" ")
        return []
    else:
        logger.info(f'\t\t{str(count).ljust(9, " ")} ‚Äî –∫–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.')
        return vk.wall.get(domain="club" + group, offset=0, count=count)['items']


async def get_posts(bot: Bot):
    # global LAST_POST_ID
    try:
        logger.info('==================[–ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò]===================')
        for group, last_post in get_json().items():
            logger.info('–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –≤ –≥—Ä—É–ø–ø–µ:')
            response = vk.wall.get(domain="club" + group, offset=0, count=1)
            if "error" in response:
                logger.error(f"\t\t–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ: {response['error']['error_msg']}.")
                return

            first_post = response["items"][0]
            logger.info(f'\t\t{group.ljust(9, " ")} ‚Äî ID –≥—Ä—É–ø–ø—ã.')
            logger.info(f'\t\t{str(first_post["id"]).ljust(9, " ")} ‚Äî ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞.')

            if last_post is None:
                logger.info('\t\t============[–ù–û–í–ê–Ø –ì–†–£–ü–ü–ê]============')
                write_info(group, first_post["id"])
                logger.info('\t\t–°–æ—Ö—Ä–∞–Ω–∏–ª ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞.')
                logger.info(' ')
                continue

            posts = await receive_last_posts(first_post, group)
            for post in posts:
                answer = None
                while not answer:
                    logger.info('\t\t==========[–í–´–®–ï–õ –ù–û–í–´–ô –ü–û–°–¢]==========')
                    if find_str(post['text'], ['—Å–Ω–∏–º—É', '—Å–Ω–∏–º–µ–º', '—Å–Ω–∏–º–µ—Ç', '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞—ë–º']):
                        logger.info('\t\t–ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç blacklist: –ø—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ –ø–æ–∏—Å–∫ –∂–∏–ª—å—è.')
                        write_info(group, post['id'])
                        logger.info('\t\t–°–æ—Ö—Ä–∞–Ω–∏–ª ID —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞. –ì–æ—Ç–æ–≤–æ!')
                        logger.info(' ')
                        return
                    logger.info('\t\t–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è AI, –æ–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞...')
                    answer = await send_ai_request(post['text'])
                logger.info('\t\t–û—Ç–≤–µ—Ç –æ—Ç AI –±—ã–ª –ø–æ–ª—É—á–µ–Ω.')

                chat_id = TG_MAIN if 'üü¢' in answer else TG_TRASH
                await bot.send_chat_action(chat_id=chat_id, action="typing")

                link = f'https://vk.com/club{group}?w=wall-{group}'
                orig_text = post['text']
                caption = f'{answer}\n\n{link}_{post['id']}\n\n<blockquote expandable>{orig_text}</blockquote>'
                attachments = post['attachments']
                media_group = []

                i = 0
                caption_continue = None

                for media in attachments:
                    if media['type'] == 'photo':
                        if i != 0:
                            caption = ""
                        else:
                            i = 1

                        if len(caption) > 1024:
                            captions = caption.split('\n\n')
                            caption = '\n\n'.join(captions[:-1])
                            caption_continue = captions[-1]

                        media_group.append(
                                InputMediaPhoto(media=media['photo']['orig_photo']['url'], caption=caption,
                                                parse_mode='HTML'))
                if media_group:
                    await bot.send_media_group(chat_id=chat_id, media=media_group)
                    if caption_continue:
                        await bot.send_message(chat_id=chat_id, text=caption_continue, parse_mode='HTML')
                else:
                    await bot.send_message(chat_id=chat_id, text=caption, parse_mode='HTML')
                logger.info('\t\t–û—Ç–ø—Ä–∞–≤–∏–ª –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.')
                write_info(group, post['id'])
                logger.info('\t\t–°–æ—Ö—Ä–∞–Ω–∏–ª ID —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞. –ì–æ—Ç–æ–≤–æ!')
                logger.info(' ')
            #write_info(group, first_post['id'])
        logger.info(f'–í—Å–µ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {SLEEP_TIME} —Å–µ–∫. –°–ø–ª—é :)')
        logger.info('======================[–ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò]======================')
        logger.info(' ')
        logger.info(' ')
    except Exception as e:
        logger.error(f"\t\t–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏: {e}.\n")


async def parse(bot):
    while True:
        await get_posts(bot)
        await asyncio.sleep(SLEEP_TIME)


async def get_group_id(link: str) -> int:
    if 'https' in link:
        domain = link.replace('https://vk.com/', '').split('?')[0]
        group = vk.groups.getById(group_id=domain)
        return group[0]['id']
    return int(link)


async def get_group_list() -> str:
    groups = ', '.join(get_json().keys())
    groups_objs = vk.groups.getById(group_ids=groups)
    return '–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n\n' + ''.join(
        [f"ID: {group['id']}\n"
         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group['name']}\n"
         f"–°—Å—ã–ª–∫–∞: https://vk.com/{group['screen_name']}\n\n" for group in
         groups_objs])
